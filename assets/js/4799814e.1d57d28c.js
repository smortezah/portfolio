"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8608],{94879:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var i=n(85893),a=n(11151);const l={title:"lets-plot",tags:["Data Visualization","Python","GGPlot2","Charts","Visualization"]},s="Captivating Visualization Power of lets-plot",o={id:"visualization/lets-plot",title:"lets-plot",description:"Hi, fellow data enthusiasts! Today, we\u2019re setting sail on a delightful journey to explore the world of data visualization with lets-plot Python package, a captivating gem, by JetBrains, inspired by the legendary ggplot2 from the R universe. If you\u2019re tired of bland and dull plots that make you yawn louder than a bear in hibernation, fear not! lets-plot is here to save the day with its elegance, versatility, and charm. So, hoist your Python flags high and let\u2019s embark on this hands-on adventure!",source:"@site/docs/visualization/lets-plot.md",sourceDirName:"visualization",slug:"/visualization/lets-plot",permalink:"/portfolio/docs/visualization/lets-plot",draft:!1,unlisted:!1,tags:[{label:"Data Visualization",permalink:"/portfolio/docs/tags/data-visualization"},{label:"Python",permalink:"/portfolio/docs/tags/python"},{label:"GGPlot2",permalink:"/portfolio/docs/tags/gg-plot-2"},{label:"Charts",permalink:"/portfolio/docs/tags/charts"},{label:"Visualization",permalink:"/portfolio/docs/tags/visualization"}],version:"current",frontMatter:{title:"lets-plot",tags:["Data Visualization","Python","GGPlot2","Charts","Visualization"]},sidebar:"tutorialSidebar",previous:{title:"Data Visualization",permalink:"/portfolio/docs/visualization/"},next:{title:"Pitfalls in Data Visualization",permalink:"/portfolio/docs/visualization/pitfalls"}},r={},d=[{value:"tl;dr",id:"tldr",level:2},{value:"Setting Sail with lets-plot",id:"setting-sail-with-lets-plot",level:2},{value:"Data Preparation",id:"data-preparation",level:2},{value:"Basic Plotting",id:"basic-plotting",level:2},{value:"Customizing the Plot",id:"customizing-the-plot",level:2},{value:"Faceting",id:"faceting",level:2},{value:"A Dash of Bar Charts",id:"a-dash-of-bar-charts",level:2},{value:"Bonus",id:"bonus",level:2},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",img:"img",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"captivating-visualization-power-of-lets-plot",children:"Captivating Visualization Power of lets-plot"}),"\n",(0,i.jsxs)(t.p,{children:["Hi, fellow data enthusiasts! Today, we\u2019re setting sail on a delightful journey to explore the world of data visualization with ",(0,i.jsx)(t.a,{href:"https://lets-plot.org/index.html",children:"lets-plot"})," Python package, a captivating gem, by ",(0,i.jsx)(t.a,{href:"https://www.jetbrains.com/",children:"JetBrains"}),", inspired by the legendary ",(0,i.jsx)(t.a,{href:"https://ggplot2.tidyverse.org/",children:"ggplot2"})," from the R universe. If you\u2019re tired of bland and dull plots that make you yawn louder than a bear in hibernation, fear not! lets-plot is here to save the day with its elegance, versatility, and charm. So, hoist your Python flags high and let\u2019s embark on this hands-on adventure!"]}),"\n",(0,i.jsx)(t.h2,{id:"tldr",children:"tl;dr"}),"\n",(0,i.jsxs)(t.p,{children:["Check out the ",(0,i.jsx)(t.a,{href:"#bonus",children:"Bonus"})," section!"]}),"\n",(0,i.jsx)(t.h2,{id:"setting-sail-with-lets-plot",children:"Setting Sail with lets-plot"}),"\n",(0,i.jsxs)(t.p,{children:["The beauty of lets-plot lies in its simplicity. To get started, ensure you have lets-plot and ",(0,i.jsx)(t.code,{children:"pandas"})," installed:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",metastring:'title="Shell"',children:"pip install lets-plot pandas\n"})}),"\n",(0,i.jsx)(t.p,{children:"Then, import them:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="Python"',children:"import pandas as pd\n\nfrom lets_plot import *\n\nLetsPlot.setup_html()\n"})}),"\n",(0,i.jsx)(t.p,{children:"With lets-plot and pandas on board, we\u2019re ready to work our magic on visualizations!"}),"\n",(0,i.jsx)(t.h2,{id:"data-preparation",children:"Data Preparation"}),"\n",(0,i.jsxs)(t.p,{children:["Before we dazzle our eyes with mesmerizing plots, we need some data to play with. In the first part of this tutorial, we\u2019ll use a swashbuckling dataset of pirates and their treasure loots (available ",(0,i.jsx)(t.a,{href:"https://github.com/smortezah/portfolio/tree/main/visualization/lets-plot/data/pirate.csv",children:"here"}),"). To import the data, we\u2019ll rely on the trusty pandas library:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="Python"',children:'# Load the dataset\ndf = pd.read_csv("data/pirate.csv")\n\ndf\n'})}),"\n",(0,i.jsx)("div",{children:(0,i.jsxs)("table",{border:"1",children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{}),(0,i.jsx)("th",{children:"ship_name"}),(0,i.jsx)("th",{children:"ship_type"}),(0,i.jsx)("th",{children:"age"}),(0,i.jsx)("th",{children:"plunder"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"0"}),(0,i.jsx)("td",{children:"Blackbeard's Revenge"}),(0,i.jsx)("td",{children:"Galleon"}),(0,i.jsx)("td",{children:"32"}),(0,i.jsx)("td",{children:"50000"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"1"}),(0,i.jsx)("td",{children:"The Salty Sea Serpent"}),(0,i.jsx)("td",{children:"Frigate"}),(0,i.jsx)("td",{children:"28"}),(0,i.jsx)("td",{children:"42000"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"2"}),(0,i.jsx)("td",{children:"The Crimson Corsair"}),(0,i.jsx)("td",{children:"Sloop"}),(0,i.jsx)("td",{children:"24"}),(0,i.jsx)("td",{children:"30000"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"3"}),(0,i.jsx)("td",{children:"Calico Jack's Jewel"}),(0,i.jsx)("td",{children:"Galleon"}),(0,i.jsx)("td",{children:"36"}),(0,i.jsx)("td",{children:"65000"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"4"}),(0,i.jsx)("td",{children:"The Jolly Roger"}),(0,i.jsx)("td",{children:"Frigate"}),(0,i.jsx)("td",{children:"22"}),(0,i.jsx)("td",{children:"38000"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"5"}),(0,i.jsx)("td",{children:"The Sea Serpent"}),(0,i.jsx)("td",{children:"Sloop"}),(0,i.jsx)("td",{children:"27"}),(0,i.jsx)("td",{children:"32000"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"6"}),(0,i.jsx)("td",{children:"Captain Hook's Revenge"}),(0,i.jsx)("td",{children:"Galleon"}),(0,i.jsx)("td",{children:"40"}),(0,i.jsx)("td",{children:"70000"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"7"}),(0,i.jsx)("td",{children:"The Flying Dutchman"}),(0,i.jsx)("td",{children:"Frigate"}),(0,i.jsx)("td",{children:"35"}),(0,i.jsx)("td",{children:"48000"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"8"}),(0,i.jsx)("td",{children:"The Shadow Shark"}),(0,i.jsx)("td",{children:"Sloop"}),(0,i.jsx)("td",{children:"30"}),(0,i.jsx)("td",{children:"35000"})]})]})]})}),"\n",(0,i.jsx)(t.h2,{id:"basic-plotting",children:"Basic Plotting"}),"\n",(0,i.jsx)(t.p,{children:"Behold the simplicity of lets-plot! Creating stunning plots is a piece of cake. Let\u2019s start with a scatter plot to visualize the relationship between the pirates\u2019 plunder and their age:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="Python"',children:'# A basic scatter plot\np = ggplot(df) + geom_point(aes(x="age", y="plunder"))\n\n# Show the plot\np.show()\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(22434).Z+"",width:"1800",height:"1200"})}),"\n",(0,i.jsx)(t.h2,{id:"customizing-the-plot",children:"Customizing the Plot"}),"\n",(0,i.jsx)(t.p,{children:"Our plot might be functional, but it needs some flair, a touch of customization to make it truly memorable. Let\u2019s spice things up with a pirate-worthy title, axes labels, and some eye-catching aesthetics:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="Python"',children:'# Customizing the plot with labels and colors\np = (\n    ggplot(df)\n    + geom_point(aes(x="age", y="plunder", color="ship_name"), size=5)\n    + labs(\n        title="Pirate Plunder vs. Age",\n        x="Age of Pirate",\n        y="Plunder Amount",\n        color="Ship Name",\n    )\n    + theme_bw()\n    + theme(text=element_text(family="Helvetica"))\n)\n\n# Show the upgraded plot\np.show()\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(85475).Z+"",width:"1800",height:"1200"})}),"\n",(0,i.jsx)(t.h2,{id:"faceting",children:"Faceting"}),"\n",(0,i.jsxs)(t.p,{children:["Want to create a series of plots for different ship types? ",(0,i.jsx)(t.em,{children:"Faceting"})," is the answer! Check out this neat trick:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="Python"',children:'# Faceting the plot by ship type\np = (\n    ggplot(df)\n    + geom_point(aes(x="age", y="plunder", color="ship_name"), size=5)\n    + labs(\n        title="Pirate Plunder vs. Age",\n        x="Age of Pirate",\n        y="Plunder Amount",\n        color="Ship Name",\n    )\n    + facet_wrap("ship_type", ncol=3)\n    + theme_bw()\n    + theme(text=element_text(family="Helvetica"))\n)\n\n# Show the faceted plot\np.show()\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(82748).Z+"",width:"3600",height:"1200"})}),"\n",(0,i.jsx)(t.h2,{id:"a-dash-of-bar-charts",children:"A Dash of Bar Charts"}),"\n",(0,i.jsx)(t.p,{children:"Now, it\u2019s time to delve into bar charts. Let\u2019s visualize the average plunder by each ship type:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="Python"',children:'# Data\ndf_bar = df[["ship_type", "plunder"]].groupby("ship_type").mean().reset_index()\n\n# Creating a bar chart for average plunder by ship type\np = (\n    ggplot(df_bar)\n    + geom_bar(\n        aes(x="ship_type", y="plunder", fill="ship_type"), stat="identity"\n    )\n    + coord_flip()\n    + labs(\n        title="Average Plunder by Ship Type",\n        x="Ship Type",\n        y="Average Plunder",\n    )\n    + theme_classic()\n    + theme(text=element_text(family="Helvetica"), legend_position="none")\n    + ggsize(500, 300)\n)\n\n# Show the bar chart\np.show()\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(86470).Z+"",width:"2000",height:"1200"})}),"\n",(0,i.jsx)(t.h2,{id:"bonus",children:"Bonus"}),"\n",(0,i.jsx)(t.p,{children:"Now, check out some complicated plots!"}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["The datasets are available ",(0,i.jsx)(t.a,{href:"https://github.com/smortezah/portfolio/tree/main/visualization/lets-plot/data",children:"here"}),"."]})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="Python"',children:'# Data\ndf = pd.read_csv("data/nobel_final.csv")\n\n# Plot\np = (\n    ggplot(df)\n    + geom_boxplot(aes(x="category", y="age_get_prize", fill="category"))\n    + facet_grid(x="gender")\n    + ggtitle("Aggregated Information About Age by Category and Gender")\n    + labs(x="", y="Age when getting the prize")\n    + theme_bw()\n    + theme(text=element_text(family="Helvetica"))\n)\n\np.show()\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(33715).Z+"",width:"2700",height:"1200"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="Python"',children:'# Data\ndf = pd.read_csv("data/nobel_final.csv")\n\n# Plot\np = (\n    ggplot(df, aes(x="age", y="age_get_prize"))\n    + geom_bin2d(binwidth=[5, 5])\n    + scale_fill_gradient(low="#ace3c2", high="#013b18")\n    + facet_grid(x="gender")\n    + ggtitle("Common Distribution of Death Age and Getting the Prize Age")\n    + labs(x="Death age", y="Age when getting the prize")\n    + theme_bw()\n    + theme(text=element_text(family="Helvetica"))\n    # + ggsize(500, 300)\n)\n\np.show()\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(60858).Z+"",width:"2700",height:"1200"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="Python"',children:'# Data\ndf = pd.read_csv("data/nobel_final.csv")\n\n# Plot\np = (\n    ggplot(df)\n    + geom_bar(aes(x="category", fill="category"))\n    + ggtitle("Nobel Prizes by Categories")\n    + labs(x="", y="Number of prizes")\n    + theme(\n        text=element_text(family="Helvetica"),\n        panel_grid_major_x=element_blank(),\n    )\n    + flavor_solarized_light()\n    + ggsize(550, 400)\n)\n\np.show()\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(68177).Z+"",width:"1650",height:"1200"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="Python"',children:'from lets_plot.bistro.corr import corr_plot\n\n# Data\ndf = pd.read_csv("data/mpg.csv")\n\n# Plot\ncorr = corr_plot(df)\nnice_font = theme(text=element_text(family="Helvetica"))\n\np1 = (\n    corr.tiles().palette_RdYlGn().build()\n    + ggtitle("Tiles")\n    + nice_font\n    + flavor_solarized_dark()\n)\n\np2 = corr.points().palette_RdBu().build() + ggtitle("Points") + nice_font\n\np3 = (\n    corr.tiles()\n    .labels()\n    .palette_gradient(low="#417555", mid="lightgray", high="#963CA7")\n    .build()\n    + ggtitle("Tiles and labels")\n    + nice_font\n)\n\np4 = (\n    corr.points().labels().tiles().build()\n    + ggtitle("Tiles, points and labels")\n    + nice_font\n    + flavor_solarized_light()\n)\n\np = gggrid([p1, p2, p3, p4], ncol=2) + ggsize(600, 550)\n\np.show()\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(7275).Z+"",width:"1310",height:"1200"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.p,{children:"First, install \u201cgeopandas\u201d, then run the Python code."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",metastring:'title="Shell"',children:"pip install geopandas\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="Python"',children:'# Data\nimport geopandas as gpd\n\nworld = gpd.read_file("data/world.gpkg")\nworld_limits = coord_map(ylim=[-70, 85])\n\n# Create a choropleth by mapping the continent variable to the fill aes.\np = (\n    ggplot()\n    + geom_map(aes(fill="continent"), data=world, color="white")\n    + world_limits\n    + labs(x="Longitude", y="Latitude")\n    + theme(\n        text=element_text(family="Helvetica"),\n        axis_line_y=element_line(),\n    )\n    + ggsize(900, 500)\n)\n\np.show()\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(29236).Z+"",width:"2160",height:"1200"})}),"\n",(0,i.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(t.p,{children:"With lets-plot in your Python arsenal, data visualization becomes a thrilling voyage rather than a tedious journey. Inspired by R\u2019s ggplot2, this delightful package brings charm, ease, and beauty to your plotting adventures. So, hoist your Python flags high, unleash your creativity, and chart a course to mesmerizing visualizations. May your plots be as captivating as the tales of legendary pirates!"}),"\n",(0,i.jsx)(t.p,{children:"Happy plotting, and may the seas of data always be in your favor! \ud83c\udf1f\u2728"})]})}function c(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},33715:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/letsplot-aggregate-d4004c5b648f9f04fed417e60b0071d3.jpg"},86470:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/letsplot-bar-aab6a42d1336b651b579711be44087f0.jpg"},22434:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/letsplot-basic-be6dc2b415209248b930f7f6cffe1c3a.jpg"},68177:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/letsplot-categories-4ecefb3cedd2384685a267c76b4db3f7.jpg"},7275:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/letsplot-correlation-cf0c88e948cd91b87ebebaf48f03e3ac.jpg"},85475:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/letsplot-custom-83271bd2f8f1f818e5f41efe7b3cd161.jpg"},60858:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/letsplot-distribution-77e8ff60acf4fed0c1a6c62caf558595.jpg"},82748:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/letsplot-facet-f3788bef3313e975b77153cb7871e7d3.jpg"},29236:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/letsplot-map-af431d0cc048340e78c34ac0badb9c19.jpg"},11151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>s});var i=n(67294);const a={},l=i.createContext(a);function s(e){const t=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(l.Provider,{value:t},e.children)}}}]);