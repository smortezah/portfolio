"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8608],{3905:(t,e,n)=>{n.d(e,{Zo:()=>h,kt:()=>c});var l=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,l)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function r(t,e){if(null==t)return{};var n,l,a=function(t,e){if(null==t)return{};var n,l,a={},i=Object.keys(t);for(l=0;l<i.length;l++)n=i[l],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(l=0;l<i.length;l++)n=i[l],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=l.createContext({}),p=function(t){var e=l.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},h=function(t){var e=p(t.components);return l.createElement(s.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return l.createElement(l.Fragment,{},e)}},g=l.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,s=t.parentName,h=r(t,["components","mdxType","originalType","parentName"]),u=p(n),g=a,c=u["".concat(s,".").concat(g)]||u[g]||d[g]||i;return n?l.createElement(c,o(o({ref:e},h),{},{components:n})):l.createElement(c,o({ref:e},h))}));function c(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=g;var r={};for(var s in e)hasOwnProperty.call(e,s)&&(r[s]=e[s]);r.originalType=t,r[u]="string"==typeof t?t:a,o[1]=r;for(var p=2;p<i;p++)o[p]=n[p];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}g.displayName="MDXCreateElement"},579:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var l=n(87462),a=(n(67294),n(3905));const i={title:"lets-plot",tags:["Data Visualization","Python","GGPlot2","Charts","Visualization"]},o="Captivating Visualization Power of lets-plot",r={unversionedId:"visualization/lets-plot",id:"visualization/lets-plot",title:"lets-plot",description:"Hi, fellow data enthusiasts! Today, we\u2019re setting sail on a delightful journey to explore the world of data visualization with lets-plot Python package, a captivating gem, by JetBrains, inspired by the legendary ggplot2 from the R universe. If you\u2019re tired of bland and dull plots that make you yawn louder than a bear in hibernation, fear not! lets-plot is here to save the day with its elegance, versatility, and charm. So, hoist your Python flags high and let\u2019s embark on this hands-on adventure!",source:"@site/docs/visualization/lets-plot.md",sourceDirName:"visualization",slug:"/visualization/lets-plot",permalink:"/portfolio/docs/visualization/lets-plot",draft:!1,tags:[{label:"Data Visualization",permalink:"/portfolio/docs/tags/data-visualization"},{label:"Python",permalink:"/portfolio/docs/tags/python"},{label:"GGPlot2",permalink:"/portfolio/docs/tags/gg-plot-2"},{label:"Charts",permalink:"/portfolio/docs/tags/charts"},{label:"Visualization",permalink:"/portfolio/docs/tags/visualization"}],version:"current",frontMatter:{title:"lets-plot",tags:["Data Visualization","Python","GGPlot2","Charts","Visualization"]},sidebar:"tutorialSidebar",previous:{title:"Data Visualization",permalink:"/portfolio/docs/visualization/"},next:{title:"Pitfalls in Data Visualization",permalink:"/portfolio/docs/visualization/pitfalls"}},s={},p=[{value:"tl;dr",id:"tldr",level:2},{value:"Setting Sail with lets-plot",id:"setting-sail-with-lets-plot",level:2},{value:"Data Preparation",id:"data-preparation",level:2},{value:"Basic Plotting",id:"basic-plotting",level:2},{value:"Customizing the Plot",id:"customizing-the-plot",level:2},{value:"Faceting",id:"faceting",level:2},{value:"A Dash of Bar Charts",id:"a-dash-of-bar-charts",level:2},{value:"Bonus",id:"bonus",level:2},{value:"Conclusion",id:"conclusion",level:2}],h={toc:p},u="wrapper";function d(t){let{components:e,...i}=t;return(0,a.kt)(u,(0,l.Z)({},h,i,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"captivating-visualization-power-of-lets-plot"},"Captivating Visualization Power of lets-plot"),(0,a.kt)("p",null,"Hi, fellow data enthusiasts! Today, we\u2019re setting sail on a delightful journey to explore the world of data visualization with ",(0,a.kt)("a",{parentName:"p",href:"https://lets-plot.org/index.html"},"lets-plot")," Python package, a captivating gem, by ",(0,a.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/"},"JetBrains"),", inspired by the legendary ",(0,a.kt)("a",{parentName:"p",href:"https://ggplot2.tidyverse.org/"},"ggplot2")," from the R universe. If you\u2019re tired of bland and dull plots that make you yawn louder than a bear in hibernation, fear not! lets-plot is here to save the day with its elegance, versatility, and charm. So, hoist your Python flags high and let\u2019s embark on this hands-on adventure!"),(0,a.kt)("h2",{id:"tldr"},"tl;dr"),(0,a.kt)("p",null,"Check out the ",(0,a.kt)("a",{parentName:"p",href:"#bonus"},"Bonus")," section!"),(0,a.kt)("h2",{id:"setting-sail-with-lets-plot"},"Setting Sail with lets-plot"),(0,a.kt)("p",null,"The beauty of lets-plot lies in its simplicity. To get started, ensure you have lets-plot and ",(0,a.kt)("inlineCode",{parentName:"p"},"pandas")," installed:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Shell"',title:'"Shell"'},"pip install lets-plot pandas\n")),(0,a.kt)("p",null,"Then, import them:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Python" showLineNumbers',title:'"Python"',showLineNumbers:!0},"import pandas as pd\n\nfrom lets_plot import *\n\nLetsPlot.setup_html()\n")),(0,a.kt)("p",null,"With lets-plot and pandas on board, we\u2019re ready to work our magic on visualizations!"),(0,a.kt)("h2",{id:"data-preparation"},"Data Preparation"),(0,a.kt)("p",null,"Before we dazzle our eyes with mesmerizing plots, we need some data to play with. In the first part of this tutorial, we\u2019ll use a swashbuckling dataset of pirates and their treasure loots (available ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/smortezah/Portfolio/blob/main/data-visualization/lets-plot/data/pirate.csv"},"here"),"). To import the data, we\u2019ll rely on the trusty pandas library:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Python" showLineNumbers',title:'"Python"',showLineNumbers:!0},'# Load the dataset\ndf = pd.read_csv("data/pirate.csv")\n\ndf\n')),(0,a.kt)("div",null,(0,a.kt)("table",{border:"1"},(0,a.kt)("thead",null,(0,a.kt)("tr",null,(0,a.kt)("th",null),(0,a.kt)("th",null,"ship_name"),(0,a.kt)("th",null,"ship_type"),(0,a.kt)("th",null,"age"),(0,a.kt)("th",null,"plunder"))),(0,a.kt)("tbody",null,(0,a.kt)("tr",null,(0,a.kt)("th",null,"0"),(0,a.kt)("td",null,"Blackbeard's Revenge"),(0,a.kt)("td",null,"Galleon"),(0,a.kt)("td",null,"32"),(0,a.kt)("td",null,"50000")),(0,a.kt)("tr",null,(0,a.kt)("th",null,"1"),(0,a.kt)("td",null,"The Salty Sea Serpent"),(0,a.kt)("td",null,"Frigate"),(0,a.kt)("td",null,"28"),(0,a.kt)("td",null,"42000")),(0,a.kt)("tr",null,(0,a.kt)("th",null,"2"),(0,a.kt)("td",null,"The Crimson Corsair"),(0,a.kt)("td",null,"Sloop"),(0,a.kt)("td",null,"24"),(0,a.kt)("td",null,"30000")),(0,a.kt)("tr",null,(0,a.kt)("th",null,"3"),(0,a.kt)("td",null,"Calico Jack's Jewel"),(0,a.kt)("td",null,"Galleon"),(0,a.kt)("td",null,"36"),(0,a.kt)("td",null,"65000")),(0,a.kt)("tr",null,(0,a.kt)("th",null,"4"),(0,a.kt)("td",null,"The Jolly Roger"),(0,a.kt)("td",null,"Frigate"),(0,a.kt)("td",null,"22"),(0,a.kt)("td",null,"38000")),(0,a.kt)("tr",null,(0,a.kt)("th",null,"5"),(0,a.kt)("td",null,"The Sea Serpent"),(0,a.kt)("td",null,"Sloop"),(0,a.kt)("td",null,"27"),(0,a.kt)("td",null,"32000")),(0,a.kt)("tr",null,(0,a.kt)("th",null,"6"),(0,a.kt)("td",null,"Captain Hook's Revenge"),(0,a.kt)("td",null,"Galleon"),(0,a.kt)("td",null,"40"),(0,a.kt)("td",null,"70000")),(0,a.kt)("tr",null,(0,a.kt)("th",null,"7"),(0,a.kt)("td",null,"The Flying Dutchman"),(0,a.kt)("td",null,"Frigate"),(0,a.kt)("td",null,"35"),(0,a.kt)("td",null,"48000")),(0,a.kt)("tr",null,(0,a.kt)("th",null,"8"),(0,a.kt)("td",null,"The Shadow Shark"),(0,a.kt)("td",null,"Sloop"),(0,a.kt)("td",null,"30"),(0,a.kt)("td",null,"35000"))))),(0,a.kt)("h2",{id:"basic-plotting"},"Basic Plotting"),(0,a.kt)("p",null,"Behold the simplicity of lets-plot! Creating stunning plots is a piece of cake. Let\u2019s start with a scatter plot to visualize the relationship between the pirates\u2019 plunder and their age:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Python" showLineNumbers',title:'"Python"',showLineNumbers:!0},'# A basic scatter plot\np = ggplot(df) + geom_point(aes(x="age", y="plunder"))\n\n# Show the plot\np.show()\n')),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(22434).Z,width:"1800",height:"1200"})),(0,a.kt)("h2",{id:"customizing-the-plot"},"Customizing the Plot"),(0,a.kt)("p",null,"Our plot might be functional, but it needs some flair, a touch of customization to make it truly memorable. Let\u2019s spice things up with a pirate-worthy title, axes labels, and some eye-catching aesthetics:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Python" showLineNumbers',title:'"Python"',showLineNumbers:!0},'# Customizing the plot with labels and colors\np = (\n    ggplot(df)\n    + geom_point(aes(x="age", y="plunder", color="ship_name"), size=5)\n    + labs(\n        title="Pirate Plunder vs. Age",\n        x="Age of Pirate",\n        y="Plunder Amount",\n        color="Ship Name",\n    )\n    + theme_bw()\n    + theme(text=element_text(family="Helvetica"))\n)\n\n# Show the upgraded plot\np.show()\n')),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(85475).Z,width:"1800",height:"1200"})),(0,a.kt)("h2",{id:"faceting"},"Faceting"),(0,a.kt)("p",null,"Want to create a series of plots for different ship types? ",(0,a.kt)("em",{parentName:"p"},"Faceting")," is the answer! Check out this neat trick:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Python" showLineNumbers',title:'"Python"',showLineNumbers:!0},'# Faceting the plot by ship type\np = (\n    ggplot(df)\n    + geom_point(aes(x="age", y="plunder", color="ship_name"), size=5)\n    + labs(\n        title="Pirate Plunder vs. Age",\n        x="Age of Pirate",\n        y="Plunder Amount",\n        color="Ship Name",\n    )\n    + facet_wrap("ship_type", ncol=3)\n    + theme_bw()\n    + theme(text=element_text(family="Helvetica"))\n)\n\n# Show the faceted plot\np.show()\n')),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(82748).Z,width:"3600",height:"1200"})),(0,a.kt)("h2",{id:"a-dash-of-bar-charts"},"A Dash of Bar Charts"),(0,a.kt)("p",null,"Now, it\u2019s time to delve into bar charts. Let\u2019s visualize the average plunder by each ship type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Python" showLineNumbers',title:'"Python"',showLineNumbers:!0},'# Data\ndf_bar = df[["ship_type", "plunder"]].groupby("ship_type").mean().reset_index()\n\n# Creating a bar chart for average plunder by ship type\np = (\n    ggplot(df_bar)\n    + geom_bar(\n        aes(x="ship_type", y="plunder", fill="ship_type"), stat="identity"\n    )\n    + coord_flip()\n    + labs(\n        title="Average Plunder by Ship Type",\n        x="Ship Type",\n        y="Average Plunder",\n    )\n    + theme_classic()\n    + theme(text=element_text(family="Helvetica"), legend_position="none")\n    + ggsize(500, 300)\n)\n\n# Show the bar chart\np.show()\n')),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(86470).Z,width:"2000",height:"1200"})),(0,a.kt)("h2",{id:"bonus"},"Bonus"),(0,a.kt)("p",null,"Now, check out some complicated plots!"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The datasets are available ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/smortezah/Portfolio/tree/main/data-visualization/lets-plot/data"},"here"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Python" showLineNumbers',title:'"Python"',showLineNumbers:!0},'# Data\ndf = pd.read_csv("data/nobel_final.csv")\n\n# Plot\np = (\n    ggplot(df)\n    + geom_boxplot(aes(x="category", y="age_get_prize", fill="category"))\n    + facet_grid(x="gender")\n    + ggtitle("Aggregated Information About Age by Category and Gender")\n    + labs(x="", y="Age when getting the prize")\n    + theme_bw()\n    + theme(text=element_text(family="Helvetica"))\n)\n\np.show()\n')),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(33715).Z,width:"2700",height:"1200"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Python" showLineNumbers',title:'"Python"',showLineNumbers:!0},'# Data\ndf = pd.read_csv("data/nobel_final.csv")\n\n# Plot\np = (\n    ggplot(df, aes(x="age", y="age_get_prize"))\n    + geom_bin2d(binwidth=[5, 5])\n    + scale_fill_gradient(low="#ace3c2", high="#013b18")\n    + facet_grid(x="gender")\n    + ggtitle("Common Distribution of Death Age and Getting the Prize Age")\n    + labs(x="Death age", y="Age when getting the prize")\n    + theme_bw()\n    + theme(text=element_text(family="Helvetica"))\n    # + ggsize(500, 300)\n)\n\np.show()\n')),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(60858).Z,width:"2700",height:"1200"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Python" showLineNumbers',title:'"Python"',showLineNumbers:!0},'# Data\ndf = pd.read_csv("data/nobel_final.csv")\n\n# Plot\np = (\n    ggplot(df)\n    + geom_bar(aes(x="category", fill="category"))\n    + ggtitle("Nobel Prizes by Categories")\n    + labs(x="", y="Number of prizes")\n    + theme(\n        text=element_text(family="Helvetica"),\n        panel_grid_major_x=element_blank(),\n    )\n    + flavor_solarized_light()\n    + ggsize(550, 400)\n)\n\np.show()\n')),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(68177).Z,width:"1650",height:"1200"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Python" showLineNumbers',title:'"Python"',showLineNumbers:!0},'from lets_plot.bistro.corr import corr_plot\n\n# Data\ndf = pd.read_csv("data/mpg.csv")\n\n# Plot\ncorr = corr_plot(df)\nnice_font = theme(text=element_text(family="Helvetica"))\n\np1 = (\n    corr.tiles().palette_RdYlGn().build()\n    + ggtitle("Tiles")\n    + nice_font\n    + flavor_solarized_dark()\n)\n\np2 = corr.points().palette_RdBu().build() + ggtitle("Points") + nice_font\n\np3 = (\n    corr.tiles()\n    .labels()\n    .palette_gradient(low="#417555", mid="lightgray", high="#963CA7")\n    .build()\n    + ggtitle("Tiles and labels")\n    + nice_font\n)\n\np4 = (\n    corr.points().labels().tiles().build()\n    + ggtitle("Tiles, points and labels")\n    + nice_font\n    + flavor_solarized_light()\n)\n\np = gggrid([p1, p2, p3, p4], ncol=2) + ggsize(600, 550)\n\np.show()\n')),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(7275).Z,width:"1310",height:"1200"})),(0,a.kt)("hr",null),(0,a.kt)("p",null,"First, install \u201cgeopandas\u201d, then run the Python code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Shell"',title:'"Shell"'},"pip install geopandas\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Python" showLineNumbers',title:'"Python"',showLineNumbers:!0},'# Data\nimport geopandas as gpd\n\nworld = gpd.read_file("data/world.gpkg")\nworld_limits = coord_map(ylim=[-70, 85])\n\n# Create a choropleth by mapping the continent variable to the fill aes.\np = (\n    ggplot()\n    + geom_map(aes(fill="continent"), data=world, color="white")\n    + world_limits\n    + labs(x="Longitude", y="Latitude")\n    + theme(\n        text=element_text(family="Helvetica"),\n        axis_line_y=element_line(),\n    )\n    + ggsize(900, 500)\n)\n\np.show()\n')),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(29236).Z,width:"2160",height:"1200"})),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"With lets-plot in your Python arsenal, data visualization becomes a thrilling voyage rather than a tedious journey. Inspired by R\u2019s ggplot2, this delightful package brings charm, ease, and beauty to your plotting adventures. So, hoist your Python flags high, unleash your creativity, and chart a course to mesmerizing visualizations. May your plots be as captivating as the tales of legendary pirates!"),(0,a.kt)("p",null,"Happy plotting, and may the seas of data always be in your favor! \ud83c\udf1f\u2728"))}d.isMDXComponent=!0},33715:(t,e,n)=>{n.d(e,{Z:()=>l});const l=n.p+"assets/images/letsplot-aggregate-d4004c5b648f9f04fed417e60b0071d3.jpg"},86470:(t,e,n)=>{n.d(e,{Z:()=>l});const l=n.p+"assets/images/letsplot-bar-aab6a42d1336b651b579711be44087f0.jpg"},22434:(t,e,n)=>{n.d(e,{Z:()=>l});const l=n.p+"assets/images/letsplot-basic-be6dc2b415209248b930f7f6cffe1c3a.jpg"},68177:(t,e,n)=>{n.d(e,{Z:()=>l});const l=n.p+"assets/images/letsplot-categories-4ecefb3cedd2384685a267c76b4db3f7.jpg"},7275:(t,e,n)=>{n.d(e,{Z:()=>l});const l=n.p+"assets/images/letsplot-correlation-cf0c88e948cd91b87ebebaf48f03e3ac.jpg"},85475:(t,e,n)=>{n.d(e,{Z:()=>l});const l=n.p+"assets/images/letsplot-custom-83271bd2f8f1f818e5f41efe7b3cd161.jpg"},60858:(t,e,n)=>{n.d(e,{Z:()=>l});const l=n.p+"assets/images/letsplot-distribution-77e8ff60acf4fed0c1a6c62caf558595.jpg"},82748:(t,e,n)=>{n.d(e,{Z:()=>l});const l=n.p+"assets/images/letsplot-facet-f3788bef3313e975b77153cb7871e7d3.jpg"},29236:(t,e,n)=>{n.d(e,{Z:()=>l});const l=n.p+"assets/images/letsplot-map-af431d0cc048340e78c34ac0badb9c19.jpg"}}]);