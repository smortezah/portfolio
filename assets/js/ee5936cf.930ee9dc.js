"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3144],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),d=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=d(e.components);return o.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),m=a,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return t?o.createElement(h,r(r({ref:n},c),{},{components:t})):o.createElement(h,r({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:a,r[1]=s;for(var d=2;d<i;d++)r[d]=t[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},47279:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var o=t(87462),a=(t(67294),t(3905));const i={title:"PEP 8",tags:["Python","PEP8","Coding","Programming","Coding Style"]},r="PEP 8: The Path to Code Elegance",s={unversionedId:"best-practices/pep8",id:"best-practices/pep8",title:"PEP 8",description:"Welcome, fellow Pythonistas, to another exciting dive into the world of Python best practices and coding style. In this blog post, we\u2019ll embark on a journey to explore PEP 8, the official style guide for Python code. If you\u2019ve ever wondered how to write clean, readable, and Pythonic code, you\u2019ve come to the right place. So, grab your coding hats, fire up your Python interpreters, and let\u2019s dive into the wonderful world of PEP 8!",source:"@site/docs/best-practices/pep8.md",sourceDirName:"best-practices",slug:"/best-practices/pep8",permalink:"/portfolio/docs/best-practices/pep8",draft:!1,tags:[{label:"Python",permalink:"/portfolio/docs/tags/python"},{label:"PEP8",permalink:"/portfolio/docs/tags/pep-8"},{label:"Coding",permalink:"/portfolio/docs/tags/coding"},{label:"Programming",permalink:"/portfolio/docs/tags/programming"},{label:"Coding Style",permalink:"/portfolio/docs/tags/coding-style"}],version:"current",frontMatter:{title:"PEP 8",tags:["Python","PEP8","Coding","Programming","Coding Style"]},sidebar:"tutorialSidebar",previous:{title:"Best Practices",permalink:"/portfolio/docs/best-practices/"},next:{title:"Reproducibility",permalink:"/portfolio/docs/best-practices/reproducibility"}},l={},d=[{value:"The Importance of Code Readability",id:"the-importance-of-code-readability",level:2},{value:"Embracing the Zen of Python",id:"embracing-the-zen-of-python",level:2},{value:"The Aesthetics of Python Code",id:"the-aesthetics-of-python-code",level:2},{value:"Indentation",id:"indentation",level:3},{value:"Line Length",id:"line-length",level:3},{value:"Naming Conventions",id:"naming-conventions",level:3},{value:"Coding with Style",id:"coding-with-style",level:2},{value:"Imports",id:"imports",level:3},{value:"Whitespaces",id:"whitespaces",level:3},{value:"Comments and Docstrings",id:"comments-and-docstrings",level:3},{value:"Tools and Resources",id:"tools-and-resources",level:2},{value:"Linters",id:"linters",level:3},{value:"Editor and IDE Support",id:"editor-and-ide-support",level:3},{value:"Conclusion",id:"conclusion",level:2}],c={toc:d},p="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pep-8-the-path-to-code-elegance"},"PEP 8: The Path to Code Elegance"),(0,a.kt)("p",null,"Welcome, fellow Pythonistas, to another exciting dive into the world of Python best practices and coding style. In this blog post, we\u2019ll embark on a journey to explore ",(0,a.kt)("a",{parentName:"p",href:"https://www.python.org/dev/peps/pep-0008/"},"PEP 8"),", the official style guide for Python code. If you\u2019ve ever wondered how to write clean, readable, and Pythonic code, you\u2019ve come to the right place. So, grab your coding hats, fire up your Python interpreters, and let\u2019s dive into the wonderful world of PEP 8!"),(0,a.kt)("h2",{id:"the-importance-of-code-readability"},"The Importance of Code Readability"),(0,a.kt)("p",null,"Picture this: You stumble upon a codebase that resembles a bowl of spaghetti with mismatched syntax, inconsistent naming conventions, and disorganized indentation. Not only does it make your eyes twitch, but it also makes it incredibly difficult to understand and maintain the code. Enter PEP 8, the guardian of code readability, which aims to make your code visually appealing, coherent, and easily understandable by both you and your fellow developers."),(0,a.kt)("h2",{id:"embracing-the-zen-of-python"},"Embracing the Zen of Python"),(0,a.kt)("p",null,"As Pythonistas, we strive to follow the Zen of Python, a set of guiding principles for Python\u2019s design and development. PEP 8 aligns with the Zen, emphasizing the importance of readability, simplicity, and clarity. By adhering to PEP 8, we not only make our code beautiful but also embrace the Pythonic way of thinking."),(0,a.kt)("h2",{id:"the-aesthetics-of-python-code"},"The Aesthetics of Python Code"),(0,a.kt)("p",null,"PEP 8 covers various aspects of Python code style, including indentation, line length, naming conventions, imports, and more. Let\u2019s dive into some key elements."),(0,a.kt)("h3",{id:"indentation"},"Indentation"),(0,a.kt)("p",null,"Just like aligning your furniture, consistent indentation is crucial for maintaining code structure. We use 4 spaces (no tabs!) for each indentation level. Remember, spaces are a programmer\u2019s best friend!"),(0,a.kt)("admonition",{title:"Bad",type:"caution"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"def process_data(data):\n for x in data:\n  if x > 0:\n print(x)\n  else:\n        continue\n\n print('Complete!')\n"))),(0,a.kt)("admonition",{title:"Good",type:"tip"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"def process_data(data):\n    # Loop over data\n    for x in data:\n        # Process each item\n        if x > 0:\n            print(x)\n        else:\n            continue\n\n    # Final processing\n    print('Complete!')\n"))),(0,a.kt)("h3",{id:"line-length"},"Line Length"),(0,a.kt)("p",null,"Long lines of code can be a pain to read, especially when they extend beyond the standard 79 characters. Break lines using parentheses, backslashes, or even better, embrace the beauty of Python\u2019s implicit line continuation."),(0,a.kt)("admonition",{title:"Bad",type:"caution"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"this_is_a_super_long_variable_name_spanning_over_hundred_characters_which_makes_it_hard_to_read = {\n    'key1': 'long value here', 'key2': 'many long values that should be split across lines'\n}\n\nprint('This error message is super super long and verbose spanning multiple lines!')\n\nif (long_condition_1 and long_condition_2 and long_condition_3 and long_condition_4):\n    do_something()\n"))),(0,a.kt)("admonition",{title:"Good",type:"tip"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"long_variable_name = {\n    'key1': 'long value here',\n    'key2': 'other long value',\n    'key3': 'many long values', # split across lines\n}\n\nprint(\n    'This error message is super super long '\n    'and verbose spanning multiple lines!'\n)\n\nif (\n    long_condition_1\n    and long_condition_2\n    and long_condition_3\n    and long_condition_4\n):\n    do_something()\n"))),(0,a.kt)("h3",{id:"naming-conventions"},"Naming Conventions"),(0,a.kt)("p",null,"Naming things is hard, but PEP 8 has got your back. From variable names to function names and everything in between, PEP 8 provides guidelines to help you name your entities with clarity and consistency."),(0,a.kt)("admonition",{title:"Bad",type:"caution"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"def getModelMetrics():\n    pass\n\nclass myNetwork:\n    def __init__(self, Id, Name):\n      self.userID = Id\n      self.fullName = Name\n\nmax_epochs = 100\n"))),(0,a.kt)("admonition",{title:"Good",type:"tip"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"def get_model_metrics():\n    pass\n\nclass MyNetwork:\n    def __init__(self, id, name):\n      self.user_id = id\n      self.full_name = name\n\nMAX_EPOCHS = 100\n"))),(0,a.kt)("p",null,"The good examples above use:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"snake_case for functions and variables"),(0,a.kt)("li",{parentName:"ul"},"Capitalized camelCase for classes"),(0,a.kt)("li",{parentName:"ul"},"Descriptive names like user_id and full_name"),(0,a.kt)("li",{parentName:"ul"},"Capitalized named constant like MAX_EPOCHS")),(0,a.kt)("h2",{id:"coding-with-style"},"Coding with Style"),(0,a.kt)("p",null,"Now that we\u2019ve covered the basics, let\u2019s put our coding hats on and dive into some practical tips and tricks to write Python code that oozes style and elegance."),(0,a.kt)("h3",{id:"imports"},"Imports"),(0,a.kt)("p",null,"Organizing your imports can make a significant difference in code readability. Group related imports together, separate standard library imports from third-party imports, and keep them neatly organized at the top of your file."),(0,a.kt)("admonition",{title:"Bad",type:"caution"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"import numpy as np\nfrom utils import helper_function\nimport os\nfrom my_module import my_function\nimport sys\nimport pandas as pd\n\n...\n"))),(0,a.kt)("admonition",{title:"Good",type:"tip"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"import os\nimport sys\n\nimport numpy as np\nimport pandas as pd\n\nfrom my_module import my_function\nfrom utils import helper_function\n\n...\n"))),(0,a.kt)("h3",{id:"whitespaces"},"Whitespaces"),(0,a.kt)("p",null,"Don\u2019t fear the white space! Use blank lines judiciously to separate logical sections of your code, making it more scannable and comprehensible."),(0,a.kt)("admonition",{title:"Bad",type:"caution"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},'def calculate_average(numbers):\n    # Let\'s calculate the average of a list of numbers\n    total = 0\n    count = 0\n    for num in numbers:\n        total += num\n        count += 1\n    average = total / count\n    return average\n\n# Example usage\nmy_numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n# Calculate the average\nresult = calculate_average(my_numbers)\n# Print the result\nprint("The average is:", result)\n'))),(0,a.kt)("admonition",{title:"Good",type:"tip"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},'def calculate_average(numbers):\n    # Let\'s calculate the average of a list of numbers\n    total = 0\n    count = 0\n\n    for num in numbers:\n        total += num\n        count += 1\n\n    average = total / count\n\n    return average\n\n\n# Example usage\nmy_numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\n# Calculate the average\nresult = calculate_average(my_numbers)\n\n# Print the result\nprint("The average is:", result)\n'))),(0,a.kt)("h3",{id:"comments-and-docstrings"},"Comments and Docstrings"),(0,a.kt)("p",null,"Your code should tell a story, and comments and docstrings are your narrators. Craft informative comments and docstrings to guide others (and your future self) through the intricacies of your code."),(0,a.kt)("admonition",{title:"Bad",type:"caution"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"def calculate_average(numbers):\n    # Calculate average\n    total = 0\n    count = 0\n\n    for num in numbers:\n        total += num\n        count += 1\n\n    average = total / count\n\n    return average\n"))),(0,a.kt)("admonition",{title:"Good",type:"tip"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},'def calculate_average(numbers):\n    """\n    Calculate the average of a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        float: The average of the numbers.\n    """\n    total = 0\n    count = 0\n\n    for num in numbers:\n        total += num\n        count += 1\n\n    average = total / count\n\n    return average\n'))),(0,a.kt)("h2",{id:"tools-and-resources"},"Tools and Resources"),(0,a.kt)("p",null,"As a data scientist and machine learning engineer, your journey with PEP 8 can be made even smoother by leveraging some fantastic tools and resources. Here are a few worth exploring."),(0,a.kt)("h3",{id:"linters"},"Linters"),(0,a.kt)("p",null,"Tools like ",(0,a.kt)("a",{parentName:"p",href:"https://flake8.pycqa.org/"},"flake8"),", ",(0,a.kt)("a",{parentName:"p",href:"https://pylint.org/"},"pylint"),", and ",(0,a.kt)("a",{parentName:"p",href:"https://black.readthedocs.io/"},"Black")," can automatically analyze your code for PEP 8 violations and offer suggestions for improvement. They act as your personal code style assistants, making sure your code is always on point."),(0,a.kt)("h3",{id:"editor-and-ide-support"},"Editor and IDE Support"),(0,a.kt)("p",null,"Popular text editors and IDEs like ",(0,a.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/"},"Visual Studio Code")," and ",(0,a.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/pycharm/"},"PyCharm")," provide plugins and extensions that highlight PEP 8 violations as you write code, nudging you toward cleaner and more beautiful code."),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"Congratulations, dear Pythonistas! You\u2019ve taken a marvelous journey through the realms of PEP 8, the Pythonic path to code elegance. By embracing PEP 8, you\u2019ve armed yourself with the knowledge and tools to write clean, readable, and Pythonic code. Remember, ",(0,a.kt)("em",{parentName:"p"},"style matters"),", and your code should not only be correct but also beautiful. So go forth, code with flair, and let the Pythonic magic unfold!"))}u.isMDXComponent=!0}}]);