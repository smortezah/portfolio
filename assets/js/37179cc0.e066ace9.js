"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7828],{60760:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var i=t(85893),a=t(11151);const s={description:"An introduction to lambda functions in Python",tags:["lambda functions","python","coding tips","data science"]},o="Lambda Functions",r={id:"python/lambda",title:"Lambda Functions",description:"An introduction to lambda functions in Python",source:"@site/docs/python/lambda.md",sourceDirName:"python",slug:"/python/lambda",permalink:"/portfolio/docs/python/lambda",draft:!1,unlisted:!1,tags:[{label:"lambda functions",permalink:"/portfolio/docs/tags/lambda-functions"},{label:"python",permalink:"/portfolio/docs/tags/python"},{label:"coding tips",permalink:"/portfolio/docs/tags/coding-tips"},{label:"data science",permalink:"/portfolio/docs/tags/data-science"}],version:"current",frontMatter:{description:"An introduction to lambda functions in Python",tags:["lambda functions","python","coding tips","data science"]},sidebar:"tutorialSidebar",previous:{title:"Generators",permalink:"/portfolio/docs/python/generator"},next:{title:"Web Scraping",permalink:"/portfolio/docs/scrape/"}},l={},d=[{value:"Anatomy of a Lambda",id:"anatomy-of-a-lambda",level:2},{value:"The Silent Sorcery",id:"the-silent-sorcery",level:3},{value:"Syntax Under the Microscope",id:"syntax-under-the-microscope",level:3},{value:"When to Unleash the Lambda?",id:"when-to-unleash-the-lambda",level:3},{value:"<code>lambda</code> vs. <code>def</code>",id:"lambda-vs-def",level:2},{value:"The <code>def</code> Gladiator",id:"the-def-gladiator",level:3},{value:"The Lambda Rogue",id:"the-lambda-rogue",level:3},{value:"When to Choose Your Champion",id:"when-to-choose-your-champion",level:3},{value:"Practical Applications",id:"practical-applications",level:2},{value:"Sorting",id:"sorting",level:3},{value:"Filtering",id:"filtering",level:3},{value:"Mapping",id:"mapping",level:3},{value:"Custom Key",id:"custom-key",level:3},{value:"The Pro Tips Scroll",id:"the-pro-tips-scroll",level:3},{value:"When Not to Use Lambdas",id:"when-not-to-use-lambdas",level:2},{value:"The One-Liner Illusion",id:"the-one-liner-illusion",level:3},{value:"The Missing Nameplate",id:"the-missing-nameplate",level:3},{value:"The Loop Enigma",id:"the-loop-enigma",level:3},{value:"The Multiline Abyss",id:"the-multiline-abyss",level:3},{value:"The Side Effect Mirage",id:"the-side-effect-mirage",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"lambda-functions",children:"Lambda Functions"}),"\n",(0,i.jsxs)(n.p,{children:['The term "lambda" traces its lineage to the venerable ',(0,i.jsx)(n.strong,{children:"lambda calculus"}),", a mathematical framework concocted by Alonzo Church in the 1930s. But fear not, we won't delve into esoteric symbols and arcane rituals. Instead, let's focus on Python's interpretation."]}),"\n",(0,i.jsxs)(n.p,{children:["In essence, a lambda function is a ",(0,i.jsx)(n.strong,{children:"nameless, ephemeral function"}),"\u2014a fleeting spark of logic that ignites and vanishes without leaving a trace. Imagine it as a post-it note: jot down a quick task, stick it on your code fridge, and discard it when done. No ceremony, no fuss."]}),"\n",(0,i.jsx)(n.h2,{id:"anatomy-of-a-lambda",children:"Anatomy of a Lambda"}),"\n",(0,i.jsxs)(n.p,{children:["Let us unravel the intricate threads that compose the ",(0,i.jsx)(n.strong,{children:"lambda function"}),"\u2014Python's pocket-sized enigma. Imagine it as a bonsai tree: small, meticulously pruned, yet harboring profound wisdom."]}),"\n",(0,i.jsx)(n.h3,{id:"the-silent-sorcery",children:"The Silent Sorcery"}),"\n",(0,i.jsx)(n.p,{children:"Behold the incantation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",metastring:'title="Python"',children:"double = lambda x: x * 2\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this snippet, ",(0,i.jsx)(n.code,{children:"lambda x: x * 2"})," emerges\u2014a nameless function, akin to a masked ball attendee. Its purpose? Doubling its input, like a mirror reflecting reality. But why the secrecy? Because lambdas are ",(0,i.jsx)(n.strong,{children:"ephemeral"}),"\u2014here one moment, gone the next. They lack names, like elusive whispers in a crowded room."]}),"\n",(0,i.jsx)(n.h3,{id:"syntax-under-the-microscope",children:"Syntax Under the Microscope"}),"\n",(0,i.jsx)(n.p,{children:"Let us dissect our lambda potion:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"lambda"})," keyword initiates the ritual."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"x"})," represents our variable."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"x * 2"})," is the spell\u2014the single expression that transforms ",(0,i.jsx)(n.code,{children:"x"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["But beware! Lambdas are ",(0,i.jsx)(n.strong,{children:"expression-only wizards"}),". They thrive on brevity, like haikus constrained by syllables. No loops, no multiline sagas."]}),"\n",(0,i.jsx)(n.h3,{id:"when-to-unleash-the-lambda",children:"When to Unleash the Lambda?"}),"\n",(0,i.jsx)(n.p,{children:"Imagine you're crafting a spellbook\u2014a Python script. Suddenly, you need a quick charm: sort a list, filter elements, or map data. The lambda emerges from the shadows, like a nimble rogue. It's your Swiss Army knife, wielded for convenience."}),"\n",(0,i.jsxs)(n.p,{children:["Yet heed this caveat: lambdas adore simplicity. For complex quests, summon the venerable ",(0,i.jsx)(n.code,{children:"def"}),"\u2014our seasoned knight. Lambdas are the sprinters; ",(0,i.jsx)(n.code,{children:"def"})," is the marathon runner."]}),"\n",(0,i.jsxs)(n.h2,{id:"lambda-vs-def",children:[(0,i.jsx)(n.code,{children:"lambda"})," vs. ",(0,i.jsx)(n.code,{children:"def"})]}),"\n",(0,i.jsxs)(n.p,{children:["Ladies and gentlemen, gather 'round the coding arena! In the red corner, we have the heavyweight contender: ",(0,i.jsx)(n.code,{children:"def"}),". In the blue corner, the agile underdog: ",(0,i.jsx)(n.code,{children:"lambda"}),". Let the battle commence!"]}),"\n",(0,i.jsxs)(n.h3,{id:"the-def-gladiator",children:["The ",(0,i.jsx)(n.code,{children:"def"})," Gladiator"]}),"\n",(0,i.jsxs)(n.p,{children:["Behold, the venerable ",(0,i.jsx)(n.code,{children:"def"}),"\u2014a seasoned warrior with a full name, battle scars, and a penchant for verbosity. When you need a function that can wield swords, ride dragons, and recite epic sagas, ",(0,i.jsx)(n.code,{children:"def"})," steps forth. Its syntax is familiar, like an old friend:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",metastring:'title="Python"',children:"def double(x):\n    return x * 2\n"})}),"\n",(0,i.jsxs)(n.p,{children:["With ",(0,i.jsx)(n.code,{children:"def"}),", you can craft elaborate functions, complete with docstrings, multiline logic, and even a side quest or two. It's the marathon runner, pacing itself through the codebase, gathering allies (variables) along the way."]}),"\n",(0,i.jsx)(n.h3,{id:"the-lambda-rogue",children:"The Lambda Rogue"}),"\n",(0,i.jsxs)(n.p,{children:["Now, let us summon the nimble rogue\u2014the ",(0,i.jsx)(n.code,{children:"lambda"}),". Picture a masked ball attendee, mysterious and nameless. Its attire? A single expression, like a masquerade mask concealing its identity:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",metastring:'title="Python"',children:"double = lambda x: x * 2\n"})}),"\n",(0,i.jsx)(n.p,{children:"The lambda thrives on brevity. It's the sprinter, dashing through your script, leaving no trace. But beware! It can only express single expressions\u2014no loops, no multiline sagas. Like a haiku, it adheres to syllable constraints."}),"\n",(0,i.jsx)(n.h3,{id:"when-to-choose-your-champion",children:"When to Choose Your Champion"}),"\n",(0,i.jsx)(n.p,{children:"In the heat of battle, how do you decide? Here's your guide:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Choose ",(0,i.jsx)(n.code,{children:"def"})," When:"]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You seek verbosity."}),"\n",(0,i.jsx)(n.li,{children:"Your function requires multiline logic."}),"\n",(0,i.jsx)(n.li,{children:"Side effects (print statements, logging) are your allies."}),"\n",(0,i.jsx)(n.li,{children:"You're building a fortress\u2014a reusable, named function."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Summon the Lambda When:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Brevity beckons; one-liners suffice."}),"\n",(0,i.jsx)(n.li,{children:"You're sorting lists, filtering elements, or mapping data."}),"\n",(0,i.jsx)(n.li,{children:"Simplicity is your mantra."}),"\n",(0,i.jsx)(n.li,{children:"The code caf\xe9 awaits, and you need a quick charm."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"practical-applications",children:"Practical Applications"}),"\n",(0,i.jsx)(n.p,{children:"Let's dive into the practical realm of lambda functions. Grab your enchanted quills, for we're about to conjure some real-world magic."}),"\n",(0,i.jsx)(n.h3,{id:"sorting",children:"Sorting"}),"\n",(0,i.jsxs)(n.p,{children:["Picture a dusty library filled with ancient tomes (or a list of numbers, if you prefer). You seek order\u2014a way to sort them alphabetically, numerically, or by some mystical criterion. Enter the lambda! With a dash of ",(0,i.jsx)(n.code,{children:"sorted()"})," or ",(0,i.jsx)(n.code,{children:"sort()"}),", you can wield its power:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",metastring:'title="Python"',children:'from pprint import pprint\n\nbooks = [\n    {"title": "The Alchemist", "author": "Paulo Coelho", "pages": 208},\n    {"title": "Dune", "author": "Frank Herbert", "pages": 688},\n    {"title": "Harry Potter", "author": "J.K. Rowling", "pages": 320},\n]\n\n# Sort by title\nsorted_books = sorted(books, key=lambda book: book["title"])\npprint(sorted_books)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[{'author': 'Frank Herbert', 'pages': 688, 'title': 'Dune'},\n {'author': 'J.K. Rowling', 'pages': 320, 'title': 'Harry Potter'},\n {'author': 'Paulo Coelho', 'pages': 208, 'title': 'The Alchemist'}]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The lambda, disguised as ",(0,i.jsx)(n.code,{children:'lambda book: book["title"]'}),", whispers the sorting criteria."]}),"\n",(0,i.jsx)(n.h3,{id:"filtering",children:"Filtering"}),"\n",(0,i.jsx)(n.p,{children:"Imagine a mystical garden with an overgrown thicket of data. Your quest: extract only the ripest fruits (or elements) that meet certain conditions. Fear not, for the lambda is your pruning shears:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",metastring:'title="Python"',children:"numbers = [1, 5, 9, 12, 18, 21]\n\n# Filter the odd ones\nodd_numbers = list(filter(lambda x: x % 2 != 0, numbers))\nprint(odd_numbers)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[1, 5, 9, 21]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"mapping",children:"Mapping"}),"\n",(0,i.jsx)(n.p,{children:"Close your eyes and envision a treasure map\u2014a list of coordinates waiting to reveal their secrets. But wait! You need to transform them, apply a magical formula, or perhaps convert Fahrenheit to Celsius. Enter the lambda, riding a cartographer's compass:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",metastring:'title="Python"',children:"temperatures_fahrenheit = [68, 75, 82, 90]\n\n# Convert to Celsius\ntemperatures_celsius = list(\n    map(lambda f: (f - 32) * 5 / 9, temperatures_fahrenheit)\n)\nprint(temperatures_celsius)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[20.0, 23.88888888888889, 27.77777777777778, 32.22222222222222]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The lambda, disguised as ",(0,i.jsx)(n.code,{children:"lambda f: (f - 32) * 5 / 9"}),", whispers the incantation. The temperatures shift, revealing their hidden patterns."]}),"\n",(0,i.jsx)(n.h3,{id:"custom-key",children:"Custom Key"}),"\n",(0,i.jsx)(n.p,{children:"In the grand bazaar of dictionaries and objects, you seek a unique identifier\u2014a key to unlock their secrets. Fear not, for the lambda crafts custom keys:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",metastring:'title="Python"',children:'from pprint import pprint\n\ninventory = [\n    {"item": "Potion of Wisdom", "quantity": 10},\n    {"item": "Elixir of Courage", "quantity": 5},\n    {"item": "Scroll of Knowledge", "quantity": 20},\n]\n\n# Sort by quantity (descending)\nsorted_inventory = sorted(\n    inventory, key=lambda item: item["quantity"], reverse=True\n)\npprint(sorted_inventory)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[{'item': 'Scroll of Knowledge', 'quantity': 20},\n {'item': 'Potion of Wisdom', 'quantity': 10},\n {'item': 'Elixir of Courage', 'quantity': 5}]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"the-pro-tips-scroll",children:"The Pro Tips Scroll"}),"\n",(0,i.jsx)(n.p,{children:"Before we bid adieu, a few pro tips to enhance your lambda-fu:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Avoid Complex Rituals:"})," Lambdas thrive on simplicity. If your logic spans multiple lines, summon ",(0,i.jsx)(n.code,{children:"def"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Know Your Audience:"})," Use lambdas sparingly. Not everyone appreciates their cryptic elegance."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lambda Decorators:"})," Explore decorators like ",(0,i.jsx)(n.code,{children:"functools.partial"})," and ",(0,i.jsx)(n.code,{children:"functools.reduce"}),". They amplify the lambda's powers."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"when-not-to-use-lambdas",children:"When Not to Use Lambdas"}),"\n",(0,i.jsxs)(n.p,{children:["For every spell has its limitations, and the ",(0,i.jsx)(n.strong,{children:"lambda"})," is no exception. Like a magical artifact with a chink in its armor, lambdas falter in certain scenarios. Let us unveil these hidden traps and maintain our Pythonic integrity."]}),"\n",(0,i.jsx)(n.h3,{id:"the-one-liner-illusion",children:"The One-Liner Illusion"}),"\n",(0,i.jsxs)(n.p,{children:["Beware of the one-liner illusion! Lambdas thrive on brevity, but their brevity can be deceptive. When your incantation grows beyond a single expression, the lambda stumbles. Imagine a haiku attempting to narrate an epic saga\u2014it falters, gasps, and yearns for the multiline embrace of ",(0,i.jsx)(n.code,{children:"def"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"the-missing-nameplate",children:"The Missing Nameplate"}),"\n",(0,i.jsxs)(n.p,{children:["Lambdas are nameless specters, like ghosts flitting through your code. Their anonymity can bewitch you, but remember: debugging becomes a quest for the lost soul. When your function yearns for a name, when docstrings beckon, summon the venerable ",(0,i.jsx)(n.code,{children:"def"}),". It bears its nameplate proudly, like a knight's crest."]}),"\n",(0,i.jsx)(n.h3,{id:"the-loop-enigma",children:"The Loop Enigma"}),"\n",(0,i.jsxs)(n.p,{children:["Ah, loops\u2014the heartbeat of algorithms, the rhythm of data. But lambdas shy away from their dance. Imagine a waltz with no partner, a tango without a twist. When loops beckon, when iterations call, ",(0,i.jsx)(n.code,{children:"def"})," steps forth. It waltzes, tangoes, and foxtrots through the data, leaving no step unturned."]}),"\n",(0,i.jsx)(n.h3,{id:"the-multiline-abyss",children:"The Multiline Abyss"}),"\n",(0,i.jsxs)(n.p,{children:["Picture a labyrinthine script, where logic sprawls across lines like ivy on castle walls. The lambda, alas, cannot traverse this abyss. Its syntax forbids multiline expressions. When your function yearns for a saga, when ifs, elifs, and elses entwine, ",(0,i.jsx)(n.code,{children:"def"})," unfurls its parchment."]}),"\n",(0,i.jsx)(n.h3,{id:"the-side-effect-mirage",children:"The Side Effect Mirage"}),"\n",(0,i.jsxs)(n.p,{children:["Lambdas are ascetics. They shun side effects\u2014those print statements, those logging whispers. When your function yearns to shout to the heavens, to leave footprints in the snow, ",(0,i.jsx)(n.code,{children:"def"})," beckons."]}),"\n",(0,i.jsx)(n.p,{children:"As our journey draws to a close, may your code be as elegant as a well-crafted sonnet."}),"\n",(0,i.jsx)(n.p,{children:"Until next time, happy coding! \ud83d\ude80\ud83d\udc0d"})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>o});var i=t(67294);const a={},s=i.createContext(a);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);